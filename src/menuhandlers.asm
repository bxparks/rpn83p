;-----------------------------------------------------------------------------
; MIT License
; Copyright (c) 2023 Brian T. Park
;
; Handlers for menu items.
;
; Every handler is given the following input parameters:
;   - HL:u16=menuId
;   - CF:bool
;       - 0 indicates 'onEnter' event into group
;       - 1 indicates 'onExit' event from group
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Predefined Menu handlers.
;-----------------------------------------------------------------------------

; Description: Null item handler. Does nothing.
mNullHandler:
    ret

; Description: Handler for menu item which has not been implemented. Prints an
; "Err: Not Yet" error message.
mNotYetHandler:
    ld a, errorCodeNotYet
    ld (handlerCode), a
    ret

; Description: Default handler for MenuGroup nodes. This handler currently does
; nothing. The 'chdir' functionality is now handled by dispatchMenuNode()
; because it needs to send an 'onExit' to the current node, and an 'onEnter'
; event to the selected node.
mGroupHandler:
    ret

;-----------------------------------------------------------------------------
; Handlers for the various menu nodes generated by compilemenu.py.
;-----------------------------------------------------------------------------

; Description: Show Help pages.
mHelpHandler:
    bcall(_ProcessHelpCommands)
    ret

;-----------------------------------------------------------------------------
; Children nodes of MATH menu.
;-----------------------------------------------------------------------------

; Description: Calculate X^3.
mCubeHandler:
    call closeInputAndRecallUniversalX
    bcall(_UniversalCube)
    bcall(_ReplaceStackX)
    ret

; Description: Calculate the cubic root of X, X^(1/3).
mCubeRootHandler:
    call closeInputAndRecallUniversalX
    bcall(_UniversalCubeRoot)
    bcall(_ReplaceStackX)
    ret

; Description: Calculate the X root of Y, Y^(1/X).
mXRootYHandler:
    call closeInputAndRecallUniversalXY ; CP1=Y; CP3=X
    bcall(_UniversalXRootY)
    bcall(_ReplaceStackXY)
    ret

; Description: Calculate the angle of the (X, Y) in x-y plane. The y-axis must
; be pushed into the RPN stack first, then the x-axis. This order is consistent
; with the the `>POL` conversion function.
;
; The first version used bcall(_ATan2), but it does not seem produce the
; correct results.
;
; The second version used bcall(_RToP), but it has an overflow and underflow
; bug when r^2=x^2+y^2 is too large, which limits |r| to ~<7.1e63 and ~>1e-64.
;
; The third version uses ATan2() again, but sets an undocumented parameter to
; fix the bug. Apparently, the D register must be set to 0 to get the
; documented behavior. See
; https://wikiti.brandonw.net/index.php?title=83Plus:BCALLs:40D8 for more
; details. Although that page refers to ATan2Rad(), but a similar thing happens
; for ATan2().
mAtan2Handler:
    call closeInputAndRecallXY ; OP1=Y; OP2=X
    ld d, 0 ; set undocumented parameter for ATan2()
    bcall(_ATan2) ; OP1=angle
    bcall(_ReplaceStackXY)
    ret

;-----------------------------------------------------------------------------

; Description: TwoPow(X) = 2^X
mTwoPowHandler:
    call closeInputAndRecallUniversalX
    bcall(_UniversalTwoPow)
    bcall(_ReplaceStackX)
    ret

; Description: Log2(X)=log(X)/log(2)
mLog2Handler:
    call closeInputAndRecallUniversalX
    bcall(_UniversalLog2)
    bcall(_ReplaceStackX)
    ret

; Description: LogBase(Y,X)=log(Y)/log(X)
mLogBaseHandler:
    call closeInputAndRecallUniversalXY ; CP1=Y; CP3=X
    bcall(_UniversalLogBase)
    bcall(_ReplaceStackXY)
    ret

; Description: Calculate e^x-1 without round off errors around x=0.
mExpMinusOneHandler:
    call closeInputAndRecallX
    bcall(_ExpMinusOne)
    bcall(_ReplaceStackX)
    ret

; Description: Calculate ln(1+x) without round off errors around x=0.
mLnOnePlusHandler:
    call closeInputAndRecallX
    bcall(_LnOnePlus)
    bcall(_ReplaceStackX)
    ret

;-----------------------------------------------------------------------------
; Children nodes of PROB menu.
;-----------------------------------------------------------------------------

; Calculate the Permutation function:
; P(Y, X) = P(n, r) = n!/(n-r)! = n(n-1)...(n-r+1)
mPermHandler:
    call closeInputAndRecallXY ; OP1=Y=n; OP2=X=r
    bcall(_ProbPerm)
    bcall(_ReplaceStackXY)
    ret

;-----------------------------------------------------------------------------

; Calculate the Combintation function:
; C(Y, X) = C(n, r) = n!/(n-r)!/r! = n(n-1)...(n-r+1)/(r)(r-1)...(1).
mCombHandler:
    call closeInputAndRecallXY ; OP1=Y=n; OP2=X=r
    bcall(_ProbComb)
    bcall(_ReplaceStackXY)
    ret

;-----------------------------------------------------------------------------

; mFactorialHandler(X) -> X!
; Description: Calculate the factorial of X.
mFactorialHandler:
    call closeInputAndRecallX
    bcall(_Factorial)
    bcall(_ReplaceStackX)
    ret

;-----------------------------------------------------------------------------

; mRandomHandler() -> rand()
; Description: Generate a random number [0,1) into the X register.
mRandomHandler:
    call closeInputAndRecallNone
    bcall(_Random)
    bcall(_PushToStackX)
    ret

;-----------------------------------------------------------------------------

; mRandomSeedHandler(X) -> None
; Description: Set X as the Random() seed.
mRandomSeedHandler:
    call closeInputAndRecallX
    bcall(_StoRand)
    ret

;-----------------------------------------------------------------------------
; Children nodes of CONV menu.
;-----------------------------------------------------------------------------

mRToDHandler:
    call closeInputAndRecallX
    bcall(_RToD) ; RAD to DEG
    bcall(_ReplaceStackX)
    ret

mDToRHandler:
    call closeInputAndRecallX
    bcall(_DToR) ; DEG to RAD
    bcall(_ReplaceStackX)
    ret

; Polar to Rectangular. The order of arguments is intended to be consistent
; with the HP-42S.
; Input:
;   - Y: theta
;   - X: r
; Output:
;   - Y: y
;   - X: x
mPToRHandler:
    call closeInputAndRecallXY ; OP1=Y=theta; OP2=X=r
    call op1ExOp2  ; OP1=r; OP2=theta
    bcall(_PToR) ; OP1=x; OP2=y
    call op1ExOp2  ; OP1=y; OP2=x
    bcall(_ReplaceStackXYWithOP1OP2) ; Y=OP2=y; X=OP1=x
    ret

; Rectangular to Polar. The order of arguments is intended to be consistent
; with the HP-42S. Early version used the RToP() TI-OS function, but it has an
; overflow/underflow bug when r^2 becomes too big or small. Instead, use the
; custom rectToPolar() function which does not overflow or underflow.
; Input:
;   - Y: y
;   - X: x
; Output:
;   - Y: theta
;   - X: r
mRToPHandler:
    call closeInputAndRecallXY ; OP1=Y; OP2=X
    call op1ExOp2  ; OP1=x; OP2=y
    call rectToPolar ; OP1=r; OP2=theta
    call op1ExOp2  ; OP1=theta; OP2=r
    bcall(_ReplaceStackXYWithOP1OP2) ; Y=OP1=theta; X=OP2=r
    ret

;-----------------------------------------------------------------------------

; Description: Convert "hh.mmss" to "hh.ddddd".
; Destroys: OP1, OP2, OP3, OP4 (temp)
mHmsToHrHandler:
    call closeInputAndRecallX
    bcall(_HmsToHr)
    bcall(_ReplaceStackX)
    ret

; Description: Convert "hh.dddd" to "hh.mmss".
; Destroys: OP1, OP2, OP3, OP4 (temp)
mHrToHmsHandler:
    call closeInputAndRecallX
    bcall(_HmsFromHr)
    bcall(_ReplaceStackX)
    ret

; Description: Apply 'HMS+' operation.
; Destroys: OP1, OP2, OP3, OP4 (temp)
mHmsPlusHandler:
    call closeInputAndRecallXY ; OP1=Y; OP2=X
    bcall(_HmsPlus)
    bcall(_ReplaceStackXY)
    ret

; Description: Apply 'HMS-' operation.
; Destroys: OP1, OP2, OP2, OP4 (temp)
mHmsMinusHandler:
    call closeInputAndRecallXY ; OP1=Y; OP2=X
    bcall(_HmsMinus)
    bcall(_ReplaceStackXY)
    ret

;-----------------------------------------------------------------------------
; Children nodes of MODE menu.
;-----------------------------------------------------------------------------

mFixHandler:
    ld hl, msgFixPrompt
    call startArgScanner
    call processArgCommands ; ZF=0 if cancelled
    ret nz ; do nothing if cancelled
    res fmtExponent, (iy + fmtFlags)
    res fmtEng, (iy + fmtFlags)
    jr saveFormatDigits

mSciHandler:
    ld hl, msgSciPrompt
    call startArgScanner
    call processArgCommands ; ZF=0 if cancelled
    ret nz ; do nothing if cancelled
    set fmtExponent, (iy + fmtFlags)
    res fmtEng, (iy + fmtFlags)
    jr saveFormatDigits

mEngHandler:
    ld hl, msgEngPrompt
    call startArgScanner
    call processArgCommands ; ZF=0 if cancelled
    ret nz ; do nothing if cancelled
    set fmtExponent, (iy + fmtFlags)
    set fmtEng, (iy + fmtFlags)
    jr saveFormatDigits

msgFixPrompt:
    .db "FIX", 0
msgSciPrompt:
    .db "SCI", 0
msgEngPrompt:
    .db "ENG", 0

; Description: Save the (argValue) to (fmtDigits).
; Input: (argValue)
; Output:
;   - dirtyFlagsStack set
;   - dirtyFlagsFloatMode set
;   - fmtDigits updated
; Destroys: A
saveFormatDigits:
    set dirtyFlagsStack, (iy + dirtyFlags)
    set dirtyFlagsStatus, (iy + dirtyFlags)
    set dirtyFlagsMenu, (iy + dirtyFlags)
    set dirtyFlagsInput, (iy + dirtyFlags)
    ld a, (argValue)
    cp 10
    jr c, saveFormatDigitsContinue
    ld a, fmtDigitsFloating ; "floating" number of digits, i.e. not fixed
saveFormatDigitsContinue:
    ld (fmtDigits), a
    ret

;-----------------------------------------------------------------------------

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mFixNameSelector:
    or a ; CF=0
    bit fmtExponent, (iy + fmtFlags)
    ret nz
    scf
    ret

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mSciNameSelector:
    or a ; CF=0
    bit fmtExponent, (iy + fmtFlags)
    ret z
    bit fmtEng, (iy + fmtFlags)
    ret nz
    scf
    ret

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mEngNameSelector:
    or a ; CF=0
    bit fmtExponent, (iy + fmtFlags)
    ret z
    bit fmtEng, (iy + fmtFlags)
    ret z
    scf
    ret

;-----------------------------------------------------------------------------

mRadHandler:
    res trigDeg, (iy + trigFlags)
    set dirtyFlagsStatus, (iy + dirtyFlags)
    set dirtyFlagsMenu, (iy + dirtyFlags)
    ret

mDegHandler:
    set trigDeg, (iy + trigFlags)
    set dirtyFlagsStatus, (iy + dirtyFlags)
    set dirtyFlagsMenu, (iy + dirtyFlags)
    ret

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mRadNameSelector:
    or a ; CF=0
    bit trigDeg, (iy + trigFlags)
    ret nz
    scf
    ret

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mDegNameSelector:
    or a ; CF=0
    bit trigDeg, (iy + trigFlags)
    ret z
    scf
    ret

;-----------------------------------------------------------------------------

; Description: Handle 'RSIZ' command. Does not terminate inputBuf.
mSetRegSizeHandler:
    ld hl, msgRegSizePrompt
    call startArgScanner
    ld a, 3
    ld (argLenLimit), a ; allow 3 digits, to support SIZE=100
    call processArgCommands ; ZF=0 if cancelled
    ret nz ; do nothing if cancelled
    ;
    ld a, (argValue)
    cp regsSizeMax+1 ; CF=0 if argValue>100
    jr nc, setRegSizeHandlerErr
    cp regsSizeMin ; CF=1 if argValue<25
    jr c, setRegSizeHandlerErr
    bcall(_ResizeRegs) ; test (newLen-oldLen) -> ZF,CF flags set
    ; Determine the handler code
    jr z, setRegSizeHandlerUnchanged
    jr nc, setRegSizeHandlerExpanded
setRegSizeHandlerShrunk:
    ld a, errorCodeRegsShrunk
    ld (handlerCode), a
    ret
setRegSizeHandlerExpanded:
    ld a, errorCodeRegsExpanded
    ld (handlerCode), a
    ret
setRegSizeHandlerUnchanged:
    ld a, errorCodeRegsUnchanged
    ld (handlerCode), a
    ret
setRegSizeHandlerErr:
    bcall(_ErrInvalid)

; Description: Handle 'RSZ?' command.
mGetRegSizeHandler:
    call closeInputAndRecallNone
    bcall(_LenRegs)
    bcall(_ConvertAToOP1) ; OP1=float(A)
    bcall(_PushToStackX)
    ret

msgRegSizePrompt:
    .db "RSIZ", 0

;-----------------------------------------------------------------------------

; Description: Handle 'SSIZ' command. Does not terminate inputBuf.
mSetStackSizeHandler:
    ld hl, msgStackSizePrompt
    call startArgScanner
    ld a, 1
    ld (argLenLimit), a ; accept only a single digit
    call processArgCommands ; ZF=0 if cancelled
    ret nz ; do nothing if cancelled
    ; validate input
    ld a, (argValue)
    cp stackSizeMax+1 ; CF=0 if argValue>8
    jr nc, setStackSizeHandlerErr
    cp stackSizeMin ; CF=1 if argValue<4
    jr c, setStackSizeHandlerErr
    ; perform the resize
    inc a ; add LastX register
    bcall(_ResizeStack) ; test (newLen-oldLen) -> ZF,CF flags set
    set dirtyFlagsStatus, (iy + dirtyFlags)
    ; Determine the handler code
    jr z, setStackSizeHandlerUnchanged
    jr nc, setStackSizeHandlerExpanded
setStackSizeHandlerShrunk:
    ld a, errorCodeStackShrunk
    ld (handlerCode), a
    ret
setStackSizeHandlerExpanded:
    ld a, errorCodeStackExpanded
    ld (handlerCode), a
    ret
setStackSizeHandlerUnchanged:
    ld a, errorCodeStackUnchanged
    ld (handlerCode), a
    ret
setStackSizeHandlerErr:
    bcall(_ErrInvalid)

; Description: Handle 'SSZ?' command.
mGetStackSizeHandler:
    call closeInputAndRecallNone
    bcall(_LenStack)
    dec a ; remove LastX register
    bcall(_ConvertAToOP1) ; OP1=float(A)
    bcall(_PushToStackX)
    ret

msgStackSizePrompt:
    .db "SSIZ", 0

;-----------------------------------------------------------------------------

mCommaEENormalHandler:
    ld a, commaEEModeNormal
    ld (commaEEMode), a
    set dirtyFlagsMenu, (iy + dirtyFlags)
    ret

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mCommaEENormalNameSelector:
    ld a, (commaEEMode)
    cp commaEEModeNormal
    jr z, mCommaEENormalNameSelectorAlt
    or a ; CF=0
    ret
mCommaEENormalNameSelectorAlt:
    scf
    ret

mCommaEESwappedHandler:
    ld a, commaEEModeSwapped
    ld (commaEEMode), a
    set dirtyFlagsMenu, (iy + dirtyFlags)
    ret

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mCommaEESwappedNameSelector:
    ld a, (commaEEMode)
    cp commaEEModeSwapped
    jr z, mCommaEESwappedNameSelectorAlt
    or a ; CF=0
    ret
mCommaEESwappedNameSelectorAlt:
    scf
    ret

;-----------------------------------------------------------------------------

mFormatRecordRawHandler:
    ld a, formatRecordModeRaw
    ld (formatRecordMode), a
    set dirtyFlagsMenu, (iy + dirtyFlags)
    set dirtyFlagsStack, (iy + dirtyFlags)
    ret

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mFormatRecordRawNameSelector:
    ld a, (formatRecordMode)
    cp formatRecordModeRaw
    jr z, mFormatRecordRawNameSelectorAlt
    or a ; CF=0
    ret
mFormatRecordRawNameSelectorAlt:
    scf
    ret

mFormatRecordStringHandler:
    ld a, formatRecordModeString
    ld (formatRecordMode), a
    set dirtyFlagsMenu, (iy + dirtyFlags)
    set dirtyFlagsStack, (iy + dirtyFlags)
    ret

; Description: Select menu name.
; Output: CF=0 for normal, CF=1 or alternate
mFormatRecordStringNameSelector:
    ld a, (formatRecordMode)
    cp formatRecordModeString
    jr z, mFormatRecordStringNameSelectorAlt
    or a ; CF=0
    ret
mFormatRecordStringNameSelectorAlt:
    scf
    ret

;-----------------------------------------------------------------------------
; Children nodes of HYP menu.
;-----------------------------------------------------------------------------

mSinhHandler:
    call closeInputAndRecallX
    bcall(_SinH)
    bcall(_ReplaceStackX)
    ret

mCoshHandler:
    call closeInputAndRecallX
    bcall(_CosH)
    bcall(_ReplaceStackX)
    ret

mTanhHandler:
    call closeInputAndRecallX
    bcall(_TanH)
    bcall(_ReplaceStackX)
    ret

mAsinhHandler:
    call closeInputAndRecallX
    bcall(_ASinH)
    bcall(_ReplaceStackX)
    ret

mAcoshHandler:
    call closeInputAndRecallX
    bcall(_ACosH)
    bcall(_ReplaceStackX)
    ret

mAtanhHandler:
    call closeInputAndRecallX
    bcall(_ATanH)
    bcall(_ReplaceStackX)
    ret

;-----------------------------------------------------------------------------
; Children nodes of STK menu group (stack functions).
;-----------------------------------------------------------------------------

mStackDupHandler:
    call closeInputAndRecallNone
    bcall(_LiftStack)
    ret

mStackRollUpHandler:
    call closeInputAndRecallNone
    bcall(_RollUpStack)
    ret

mStackRollDownHandler:
    jp handleKeyRollDown

mStackExchangeXYHandler:
    jp handleKeyExchangeXY

mStackDropHandler:
    call closeInputAndRecallNone
    bcall(_DropStack)
    ret

;-----------------------------------------------------------------------------
; Children nodes of CLR menu group (clear functions).
;-----------------------------------------------------------------------------

mClearRegsHandler:
    call closeInputAndRecallNone
    bcall(_ClearRegs)
    ld a, errorCodeRegsCleared
    ld (handlerCode), a
    ret

mClearStackHandler:
    call closeInputAndRecallNone
    bcall(_ClearStack)
    ret

mClearXHandler:
    call closeInputAndRecallNone
    res rpnFlagsLiftEnabled, (iy + rpnFlags) ; disable stack lift
    bcall(_OP1Set0)
    bcall(_StoStackX)
    ret

mClearStatHandler:
    jp mStatClearHandler

mClearTvmHandler:
    jp mTvmClearHandler

mClearDisplayHandler:
    bcall(_ClrLCDFull)
    bcall(_ColdInitDisplay)
    bcall(_InitDisplay)
    ret

; mClearVarsHandler:
;    bcall(_ClearVars)
;    ret
