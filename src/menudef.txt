# This file defines the hierarchy of menu items using a custom DSL (Domain
# Specific Language). The `tools/compilemenu.py` script parses this file,
# creates an internal representation of strings, identifiers, and other
# references, then generates the Z80 assembly data statements.
#
# Using a DSL to generate Z80 code makes adding, removing, changing, and
# moving menu items very easy. All of the internal identifiers and cross
# references are automatically generated by the `compilemenu.py` compiler.
#
# Grammar (I really should learn something like EBNF or ABNF properly):
#   program = menuconfig menugroup
#   menuconfig = 'MenuConfig' '[' config* ']'
#   config = 'ItemName' value
#     | 'ItemNameId' value
#     | 'ItemHandler' value
#     | 'GroupHandler' value
#   menugroup =  'MenuGroup' groupname grouplabel [handler] '[' menurow* ']'
#   menurow = 'MenuRow' '[' menunode*5 ']'
#   menunode = menuitem | menuitemalt | menugroup
#   menuitem = 'MenuItem' itemname itemlabel
#   menuitemalt = 'MenuItemAlt' itemname itemaltname itemlabel
#   handler = printableASCII+
#   nameHandler = printableASCII+
#   backHandler = printableASCII+
#   value = printableASCII+
#   groupname = alpha+
#   itemname = alpha+ | '*'
#   itemaltname = alpha+
#   altName = alpha+
#   grouplabel = alpha+
#   itemlabel = alpha+ | '*'
#   alpha =  printableASCII | fonttag
#   fonttag = '<' printableASCII+ '>'
#
# Lexical parsing rules:
#   - tokens are separated by spaces
#   - newlines are white spaces with no other meaning or behavior
#   - square brackets [ ] means "list of"
#   - '*' indicates a blank MenuItem with no ID constant
#   - comments begin with '#' and continue to the until of the line
#
# Semantics:
#   - groupname,itemname: the display name for the menu group or item
#   - itemaltname: alternative name for the menu item
#   - label: identifier for the node data in the assembly code, also used as
#       prefix for other identifiers (e.g. if the label="mNum", there will be
#       other identifiers such as "mNumId", "mNumNameId").
#   - fonttag: a symbol from the TI-OS Small Font table, e.g. '<Sdegree>'
#   - MenuRow: always has 5 menu nodes
#   - MenuGroup: supports an optional 3rd argument `handler` that overrides
#     the default handler defined by the `GroupHandler` config command

# Define the defaults for blank menu items and menu groups.
MenuConfig [
  ItemName mNullName
  ItemNameId mNullNameId
  ItemHandler mNullHandler
  GroupHandler mGroupHandler
]

# Defines the hierarchy of menus.
MenuGroup root mRoot [
  MenuRow [
    # Advanced math functions.
    MenuGroup MATH mMath [
      MenuRow [
        MenuItem X<Scaret>3 mCube
        MenuItem <ScubeR><Sroot>X mCubeRoot
        MenuItem X<Sroot>Y mXRootY
        MenuItem ATN2 mAtan2
      ]
      MenuRow [
        MenuItem 2<Scaret>X mTwoPow # 2^x
        MenuItem LOG2 mLog2 # log_base2(x)
        MenuItem LOGB mLogBase # log_base_x(y)
        MenuItem E<Scaret>X<Sdash> mExpMinusOne # exp(x)-1
        MenuItem LN1<SplusSign> mLnOnePlus # ln(1+x)
      ]
    ]
    # Arithmetic functions.
    MenuGroup NUM mNum [
      MenuRow [
        MenuItem <Spercent> mPercent
        MenuItem <Spercent>CH mPercentChange
        MenuItem GCD mGcd
        MenuItem LCM mLcm
        MenuItem PRIM mPrime
      ]
      #MenuRow [
      #  MenuItem PMOD mPrimeMod # for debugging modU32ByDE
      #]
      MenuRow [
        MenuItem IP mIntPart
        MenuItem FP mFracPart
        MenuItem FLR mFloor
        MenuItem CEIL mCeil
        MenuItem NEAR mNear
      ]
      MenuRow [
        MenuItem ABS mAbs
        MenuItem SIGN mSign
        MenuItem MOD mMod
        MenuItem MIN mMin
        MenuItem MAX mMax
      ]
      MenuRow [
        MenuItem RNDF mRoundToFix # round to FIX (ENG, SCI)
        MenuItem RNDG mRoundToGuard # round to 10 digits, removing guard digits
        MenuItem RNDN mRoundToN # round to specified N digits
      ]
    ]
    MenuGroup PROB mProb [
      MenuRow [
        MenuItem COMB mComb
        MenuItem PERM mPerm
        MenuItem N<Sexclam> mFactorial
        MenuItem RAND mRandom
        MenuItem SEED mRandomSeed
      ]
    ]
    MenuGroup CPLX mComplex [
      MenuRow [
        MenuItem REAL mComplexReal
        MenuItem IMAG mComplexImag
        MenuItem CONJ mComplexConj
        MenuItem CABS mComplexAbs
        MenuItem CANG mComplexAngle
      ]
    ]
    MenuItem HELP mHelp
  ]
  MenuRow [
    # Override the default mGroupHandler to revert to DEC mode upon exit.
    MenuGroup BASE mBase mBaseHandler [
      MenuRow [
        MenuItemAlt DEC DEC<Sblock> mDec # decimal
        MenuItemAlt HEX HEX<Sblock> mHex # hexadecimal
        MenuItemAlt OCT OCT<Sblock> mOct # octal
        MenuItemAlt BIN BIN<Sblock> mBin # binary
      ]
      MenuRow [
        MenuItem AND mBitwiseAnd
        MenuItem OR mBitwiseOr
        MenuItem XOR mBitwiseXor
        MenuItem NOT mBitwiseNot # 1's complement
        MenuItem NEG mBitwiseNeg # 2's complement
      ]
      MenuRow [
        MenuItem SL mShiftLeftLogical # shift left logical
        MenuItem SR mShiftRightLogical # shift right logical
        MenuItem ASR mShiftRightArithmetic # shift right arithmetic
        MenuItem SLn mShiftLeftLogicalN # shift left logical by N
        MenuItem SRn mShiftRightLogicalN # shift right logical by N
      ]
      MenuRow [
        MenuItem RL mRotateLeftCircular # rotate left circular
        MenuItem RR mRotateRightCircular # rotate right circular
        MenuItem RLC mRotateLeftCarry # rotate left carry
        MenuItem RRC mRotateRightCarry # rotate right carry
      ]
      MenuRow [
        MenuItem RLn mRotateLeftCircularN # rotate left circular by N
        MenuItem RRn mRotateRightCircularN # rotate right circular by N
        MenuItem RLCn mRotateLeftCarryN # rotate left carry by N
        MenuItem RRCn mRotateRightCarryN # rotate right carry by N
      ]
      MenuRow [
        MenuItem CB mClearBit
        MenuItem SB mSetBit
        MenuItem B<Squestion> mGetBit
        MenuItem REVB mReverseBit
        MenuItem CNTB mCountBit
      ]
      MenuRow [
        MenuItem B<SplusSign> mBaseAdd
        MenuItem B<Sdash> mBaseSubt
        MenuItem B<Scross> mBaseMult
        MenuItem B<Sslash> mBaseDiv
        MenuItem BDIV mBaseDiv2
      ]
      MenuRow [
        MenuItem CCF mClearCarryFlag
        MenuItem SCF mSetCarryFlag
        MenuItem CF<Squestion> mGetCarryFlag
        MenuItem WSIZ mSetWordSize # 8, 16, 24, 32
        MenuItem WSZ<Squestion> mGetWordSize
      ]
    ]
    MenuGroup HYP mHyperbolic [
      MenuRow [
        MenuItem * *
        MenuItem SINH mSinh
        MenuItem COSH mCosh
        MenuItem TANH mTanh
        MenuItem * *
      ]
      MenuRow [
        MenuItem * *
        MenuItem ASNH mAsinh
        MenuItem ACSH mAcosh
        MenuItem ATNH mAtanh
        MenuItem * *
      ]
    ]
    MenuGroup STAT mStat [
      MenuRow [
        MenuItem <ScapSigma><SplusSign> mStatPlus
        MenuItem <ScapSigma><Sdash> mStatMinus
        MenuItemAlt ALL<ScapSigma> ALL<Sblock> mStatAllMode
        MenuItemAlt LIN<ScapSigma> LIN<Sblock> mStatLinearMode
        MenuItem CL<ScapSigma> mStatClear
      ]
      MenuRow [
        MenuItem SUM mStatSum
        MenuItem MEAN mStatMean
        MenuItem WMN mStatWeightedMean
        MenuItem N mStatN
      ]
      MenuRow [
        MenuItem SDEV mStatSampleSdev
        MenuItem SCOV mStatSampleCov
        MenuItem PDEV mStatPopSdev
        MenuItem PCOV mStatPopCov
        MenuGroup CFIT mCfit [
          MenuRow [
            MenuItem Y<Sconvert>X mCfitForcastX
            MenuItem X<Sconvert>Y mCfitForcastY
            MenuItem SLOP mCfitSlope
            MenuItem YINT mCfitIntercept
            MenuItem CORR mCfitCorrelation
          ]
          MenuRow [
            MenuItemAlt LINF LIN<Sblock> mCfitLinear
            MenuItemAlt LOGF LOG<Sblock> mCfitLog
            MenuItemAlt EXPF EXP<Sblock> mCfitExp
            MenuItemAlt PWRF PWR<Sblock> mCfitPower
            MenuItem BEST mCfitBest
          ]
        ]
      ]
    ]
    MenuGroup CONV mConv [
      MenuRow [
        MenuItem <Sconvert>DEG mRToD
        MenuItem <Sconvert>RAD mDToR
        MenuItem * *
        MenuItem <Sconvert>REC mPToR
        MenuItem <Sconvert>POL mRToP
      ]
      MenuRow [
        MenuItem <Sconvert>HR mHmsToHr
        MenuItem <Sconvert>HMS mHrToHms
      ]
    ]
    MenuGroup TVM mTvm [
      MenuRow [
        MenuItem N mTvmN
        MenuItem I<Spercent>YR mTvmIYR
        MenuItem PV mTvmPV
        MenuItem PMT mTvmPMT
        MenuItem FV mTvmFV
      ]
      MenuRow [
        MenuItem P<Sslash>YR mTvmPYR
        MenuItemAlt BEG BEG<Sblock> mTvmBegin
        MenuItemAlt END END<Sblock> mTvmEnd
        MenuItem * *
        MenuItem CLTV mTvmClear
      ]
      MenuRow [
        # TVM Solver's initial first and second guesses. The label shown to
        # users is one-based, because a '0' looks like a capital 'O', and most
        # non-software people are more familar with 1-based counting. But
        # internally, we use a zero-based system and these variables are known
        # consistently as i0 (IYR0) and i1 (IYR1) respectively.
        MenuItemAlt IYR1 IY1<Sblock> mTvmIYR0 # TVM Solver's first guess
        MenuItemAlt IYR2 IY2<Sblock> mTvmIYR1 # TVM Solver's second guess
        MenuItemAlt TMAX TMX<Sblock> mTvmIterMax # TVM Solver max iter count
        MenuItem * *
        MenuItem RSTV mTvmSolverReset
      ]
    ]
  ]
  MenuRow [
    MenuGroup CLR mClear [
      MenuRow [
        MenuItem CLX mClearX
        MenuItem CLST mClearStack
        MenuItem CLRG mClearRegs
        MenuItem CL<ScapSigma> mClearStat
        MenuItem CLTV mClearTvm
      ]
    ]
    MenuGroup MODE mMode [
      MenuRow [
        MenuItemAlt FIX FIX<Sblock> mFix
        MenuItemAlt SCI SCI<Sblock> mSci
        MenuItemAlt ENG ENG<Sblock> mEng
        MenuItemAlt RAD RAD<Sblock> mRad
        MenuItemAlt DEG DEG<Sblock> mDeg
      ]
      MenuRow [
        MenuItemAlt RRES RRE<Sblock> mNumResultModeReal
        MenuItemAlt CRES CRE<Sblock> mNumResultModeComplex
        MenuItemAlt RECT REC<Sblock> mComplexModeRect
        MenuItemAlt PRAD PRA<Sblock> mComplexModeRad
        MenuItemAlt PDEG PDE<Sblock> mComplexModeDeg
      ]
      MenuRow [
        MenuItemAlt <Scomma>EE <Scomma>EE<Sblock> mCommaEENormal
        MenuItemAlt EE<Scomma> EE<Scomma><Sblock> mCommaEESwapped
      ]
    ]
    MenuGroup STK mStack [
      MenuRow [
        MenuItem * *
        MenuItem R<SupArrow> mStackRollUp
        MenuItem R<SdownArrow> mStackRollDown
        MenuItem X<Sleft><Sconvert>Y mStackExchangeXY
        MenuItem * *
      ]
    ]
    MenuGroup UNIT mUnit [
      MenuRow [
        MenuItem <Sconvert><Stemp>C mFToC
        MenuItem <Sconvert><Stemp>F mCToF
        MenuItem * *
        MenuItem <Sconvert>hPa mInhgToHpa
        MenuItem <Sconvert>iHg mHpaToInhg
      ]
      MenuRow [
        MenuItem <Sconvert>km mMiToKm
        MenuItem <Sconvert>mi mKmToMi
        MenuItem * *
        MenuItem <Sconvert>m mFtToM
        MenuItem <Sconvert>ft mMToFt
      ]
      MenuRow [
        MenuItem <Sconvert>cm mInToCm
        MenuItem <Sconvert>in mCmToIn
        MenuItem * *
        MenuItem <Sconvert><Smu>m mMilToMicron
        MenuItem <Sconvert>mil mMicronToMil
      ]
      MenuRow [
        MenuItem <Sconvert>kg mLbsToKg
        MenuItem <Sconvert>lbs mKgToLbs
        MenuItem * *
        MenuItem <Sconvert>g mOzToG
        MenuItem <Sconvert>oz mGToOz
      ]
      MenuRow [
        MenuItem <Sconvert>L mGalToL
        MenuItem <Sconvert>gal mLToGal
        MenuItem * *
        MenuItem <Sconvert>mL mFlozToMl
        MenuItem <Sconvert>foz mMlToFloz
      ]
      MenuRow [
        MenuItem <Sconvert>kJ mCalToKj
        MenuItem <Sconvert>cal mKjToCal
        MenuItem * *
        MenuItem <Sconvert>kW mHpToKw
        MenuItem <Sconvert>hp mKwToHp
      ]
      # MenuRow [
      #   MenuItem <Sconvert>Lkm mL100kmToMpg
      #   MenuItem <Sconvert>mpg mMpgToL100km
      #   MenuItem * *
      #   MenuItem <Sconvert>kPa mPsiToKpa
      #   MenuItem <Sconvert>psi mKpaToPsi
      # ]
      # MenuRow [
      #   MenuItem <Sconvert>ha mAcreToHectare
      #   MenuItem <Sconvert>acr mHectareToAcre
      #   MenuItem * *
      #   MenuItem * *
      #   MenuItem * *
      # ]
    ]
    MenuGroup DATE mDate [
      MenuRow [
        MenuItem NOW mNow
        MenuItem TZCV mConvertTimeZone
        MenuItem * * 
        MenuGroup ZONE mTimeZone [
          MenuRow [
            MenuItem UTC mZoneOffsetUTC
            MenuItem UOFF mZoneOffsetSet
            MenuItem UOF<Squestion> mZoneOffsetGet
            # MenuItem TZ mZoneTzSelect
          ]
        ]
        MenuGroup EPCH mEpoch [
          MenuRow [
            MenuItem D<Sconvert>ED mDateToEpochDays
            MenuItem ED<Sconvert>D mEpochDaysToDate
            MenuItem * *
            MenuItem D<Sconvert>ES mDateTimeToEpochSeconds
            MenuItem ES<Sconvert>D mEpochSecondstoDateTime
          ]
          MenuRow [
            MenuItem UNIX mEpochUnix # 1970-01-01T00:00:00
            MenuItem NTP mEpochNTP # 1900-01-01T00:00:00
            MenuItem GPS mEpochGPS # 1980-01-06T00:00:00
            MenuItem EPC mEpochSetCustom # set custom epoch
            MenuItem EPC<Squestion> mEpochGetCustom # get custom
          ]
        ]
      ]
      MenuRow [
        MenuItem DOW mDayOfWeek
        MenuItem LEAP mLeapYear
        #MenuItem * * 
        #MenuItem R<Sconvert>SS mDurationToSeconds
        #MenuItem SS<Sconvert>R mSecondsToDuration
        # MenuGroup ISO mIso [
        #   MenuRow [
        #     MenuItem D<Sconvert>IS mDateToIsoWeekDay
        #     MenuItem IS<Sconvert>D mIsoWeekDayToDate
        #   ]
        # ]
        # MenuGroup JULN mJulian [
        #   MenuRow [
        #     MenuItem D<Sconvert>JU mDateTimeToJulian
        #     MenuItem JU<Sconvert>D mJulianToDateTime
        #     MenuItem * *
        #     MenuItem D<Sconvert>MJ mDateTimeToModifiedJulian
        #     MenuItem MJ<Sconvert>D mModifiedJulianToDateTime
        #   ]
        # ]
      ]
    ]
  ]
]
